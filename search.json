[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome! I will add my projects here!"
  },
  {
    "objectID": "posts/bruin/index.html",
    "href": "posts/bruin/index.html",
    "title": "HW 0",
    "section": "",
    "text": "This tutorial will show and explain the code to analyze a dataframe through the creation of a visualization. It will use the Palmer’s Penguin dataset, but these strategies can be expanded for other dataframes and visualization choices.\n\n\nIn order to create an interesting visualization of the Palmer Penguins data set, it is first necessary to import the data and necessary packages. For this specific visualization, I imported the pandas, matplotlib, and seaborn libraries. The pandas library will allow us to convert the data into a data frame that can be analyzed. Using matplotlib and seaborn, I can create graphs that will depict the chosen features and aspects of the graphs.\n\n#import the necessary libraries\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\n#create a data frame using the data and pandas library\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\n#visualizing the data frame allows us to see the different features\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\n\n\nThe next step to create these visualizations is to decide which features of the dataset that you would want to illustration. I personally chose to see how the body mass of penguins differs depending on their sex for each species. Because I now know the features I want to analyze, I can isolate each of those columns for future steps.\n\n#create a copy of the data frame with chosen features\ndf = penguins[[\"Sex\", \"Body Mass (g)\", \"Species\"]].copy()\ndf.head()\n\n\n\n\n\n\n\n\nSex\nBody Mass (g)\nSpecies\n\n\n\n\n0\nMALE\n3750.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n1\nFEMALE\n3800.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n2\nFEMALE\n3250.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n3\nNaN\nNaN\nAdelie Penguin (Pygoscelis adeliae)\n\n\n4\nFEMALE\n3450.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n\n\n\n\n\n\n\n\nThe next step in the process is cleaning the relevant data by removing any penguins subjects with any missing measurements. Now that the data frame only contains the features for the graph, we can use the dropna function, which removes the rows with any null values. Had we done this before we removed the unnecessary columns, we could have unnecessarily removed rows where irrelavent columns didn’t have data. Also, we have to ensure that the Sex values are either Male or Female as there was one penguin without a null value or valid one. This cleanup removed 11 of the penguins from the visualization but ensured that the ones which were represented contained all the necessary information. I also changed the species labels to just include the species name rather than the excessive “Species” ending in the title for better readability.\n\n# Modify the data frame to make sure that the sex values are male or female\ndf = df[df[\"Sex\"].isin([\"MALE\", \"FEMALE\"])]\n# Modify the data frame to make sure that body mass and species have correct values\ndf.dropna(inplace=True)\n\n# Shorten the species names to avoid redundancy\ndf[\"Species\"] = df[\"Species\"].str.split().str[0]\n\n# Display the first few rows\ndf.head()\n\n\n\n\n\n\n\n\nSex\nBody Mass (g)\nSpecies\n\n\n\n\n0\nMALE\n3750.0\nAdelie\n\n\n1\nFEMALE\n3800.0\nAdelie\n\n\n2\nFEMALE\n3250.0\nAdelie\n\n\n4\nFEMALE\n3450.0\nAdelie\n\n\n5\nMALE\n3650.0\nAdelie\n\n\n\n\n\n\n\n\n\n\nThe next step is deciding how to represent your chosen data. I personally wanted to study the range of the body mass for each sex and species of the penguins and therefore decided to use boxplots that were vertically stacked to see how the ranged differed. Creating a figure with two subplots sharing their x-axis of body mass in grams, I was able to plot the data. I created a function that would create the boxplots for the data considering which axis and sex were passed as parameters for the function to prevent redundancy. Using the cleaned data, the function would split the data depending on the sex. Setting the y-axis to be the species of the penguins and the titles of each of the subplots to represent each of the sexes, the visualization allows us to see how the body masses of penguins ranged for each species considering their sex.\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\", width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nOnce the graphs are created, extra aesthetic features can be added to improve the readability of the graphs. One such change was creating palette with three colors (each representing one of the species) using the seaborn library and applying the changes to each of the boxplots. The next change was setting the theme of the seaborn graphs to a standard whitegrid. This allowed for the creation of gridlines and clear borders to visualize the differences between the six boxplots better. Finally, adding labels for the axes and and titles for each of the subplots in addition to the legends representing the species colors improved the readability of the graph overall.\n\n#create the color palette for the graphs using seaborn library color schemes\npalette = sns.color_palette(\"flare\", n_colors=3)\n#set the the theme and font scale of the graphs using the seaborn library\nsns.set_theme(style='whitegrid', font_scale=1.0)\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\",palette=palette, width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\n#set the labels and titles of the graphs\nax[0].set(xlabel=\"\", title=\"Male\", ylabel=\"Species\")\nax[1].set(ylabel=\"Species\", xlabel = \"Body Mass (g)\", title=\"Female\")\n\n#format the layout of the graph and display\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nOverall, these are the basic steps to create an interesting data visualization of the Palmer Penguins data set. There are many ways to represent the data of your choice. Using the matplotlib and seaborn libraries, you can choose from a variety of graphs that will allow you to interpret your data. Although I chose to represent one feature considering two variables, there are a multitude of options to choose from. In the future, using these steps will allow one to create diverse and interesting data visualizations!\n\n\n\n\n#import the necessary libraries\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n#create a data frame using the data and pandas library\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n#create a copy of the data frame with chosen features\ndf = penguins[[\"Sex\", \"Body Mass (g)\", \"Species\"]].copy()\n\n#modify the data frame to make sure that the sex values are male or female\ndf = df[df[\"Sex\"].isin([\"MALE\", \"FEMALE\"])]\n#modify the data frame to make sure that body mass and species have correct values\ndf.dropna(inplace=True)\n\n# Shorten the species names to avoid redundancy\ndf[\"Species\"] = df[\"Species\"].str.split().str[0]\n\n#create the color palette for the graphs using seaborn library color schemes\npalette = sns.color_palette(\"flare\", n_colors=3)\n#set the the theme and font scale of the graphs using the seaborn library\nsns.set_theme(style='whitegrid', font_scale=1.0)\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\",palette=palette, width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\n#set the labels and titles of the graphs\nax[0].set(xlabel=\"\", title=\"Male\", ylabel=\"Species\")\nax[1].set(ylabel=\"Species\", xlabel = \"Body Mass (g)\", title=\"Female\")\n\n#format the layout of the graph and display\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/bruin/index.html#preliminary-setup",
    "href": "posts/bruin/index.html#preliminary-setup",
    "title": "HW 0",
    "section": "",
    "text": "In order to create an interesting visualization of the Palmer Penguins data set, it is first necessary to import the data and necessary packages. For this specific visualization, I imported the pandas, matplotlib, and seaborn libraries. The pandas library will allow us to convert the data into a data frame that can be analyzed. Using matplotlib and seaborn, I can create graphs that will depict the chosen features and aspects of the graphs.\n\n#import the necessary libraries\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n\n#create a data frame using the data and pandas library\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\n#visualizing the data frame allows us to see the different features\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN"
  },
  {
    "objectID": "posts/bruin/index.html#data-selection",
    "href": "posts/bruin/index.html#data-selection",
    "title": "HW 0",
    "section": "",
    "text": "The next step to create these visualizations is to decide which features of the dataset that you would want to illustration. I personally chose to see how the body mass of penguins differs depending on their sex for each species. Because I now know the features I want to analyze, I can isolate each of those columns for future steps.\n\n#create a copy of the data frame with chosen features\ndf = penguins[[\"Sex\", \"Body Mass (g)\", \"Species\"]].copy()\ndf.head()\n\n\n\n\n\n\n\n\nSex\nBody Mass (g)\nSpecies\n\n\n\n\n0\nMALE\n3750.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n1\nFEMALE\n3800.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n2\nFEMALE\n3250.0\nAdelie Penguin (Pygoscelis adeliae)\n\n\n3\nNaN\nNaN\nAdelie Penguin (Pygoscelis adeliae)\n\n\n4\nFEMALE\n3450.0\nAdelie Penguin (Pygoscelis adeliae)"
  },
  {
    "objectID": "posts/bruin/index.html#data-cleaning",
    "href": "posts/bruin/index.html#data-cleaning",
    "title": "HW 0",
    "section": "",
    "text": "The next step in the process is cleaning the relevant data by removing any penguins subjects with any missing measurements. Now that the data frame only contains the features for the graph, we can use the dropna function, which removes the rows with any null values. Had we done this before we removed the unnecessary columns, we could have unnecessarily removed rows where irrelavent columns didn’t have data. Also, we have to ensure that the Sex values are either Male or Female as there was one penguin without a null value or valid one. This cleanup removed 11 of the penguins from the visualization but ensured that the ones which were represented contained all the necessary information. I also changed the species labels to just include the species name rather than the excessive “Species” ending in the title for better readability.\n\n# Modify the data frame to make sure that the sex values are male or female\ndf = df[df[\"Sex\"].isin([\"MALE\", \"FEMALE\"])]\n# Modify the data frame to make sure that body mass and species have correct values\ndf.dropna(inplace=True)\n\n# Shorten the species names to avoid redundancy\ndf[\"Species\"] = df[\"Species\"].str.split().str[0]\n\n# Display the first few rows\ndf.head()\n\n\n\n\n\n\n\n\nSex\nBody Mass (g)\nSpecies\n\n\n\n\n0\nMALE\n3750.0\nAdelie\n\n\n1\nFEMALE\n3800.0\nAdelie\n\n\n2\nFEMALE\n3250.0\nAdelie\n\n\n4\nFEMALE\n3450.0\nAdelie\n\n\n5\nMALE\n3650.0\nAdelie"
  },
  {
    "objectID": "posts/bruin/index.html#creating-the-graphs",
    "href": "posts/bruin/index.html#creating-the-graphs",
    "title": "HW 0",
    "section": "",
    "text": "The next step is deciding how to represent your chosen data. I personally wanted to study the range of the body mass for each sex and species of the penguins and therefore decided to use boxplots that were vertically stacked to see how the ranged differed. Creating a figure with two subplots sharing their x-axis of body mass in grams, I was able to plot the data. I created a function that would create the boxplots for the data considering which axis and sex were passed as parameters for the function to prevent redundancy. Using the cleaned data, the function would split the data depending on the sex. Setting the y-axis to be the species of the penguins and the titles of each of the subplots to represent each of the sexes, the visualization allows us to see how the body masses of penguins ranged for each species considering their sex.\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\", width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\nplt.show()"
  },
  {
    "objectID": "posts/bruin/index.html#extra-graph-features",
    "href": "posts/bruin/index.html#extra-graph-features",
    "title": "HW 0",
    "section": "",
    "text": "Once the graphs are created, extra aesthetic features can be added to improve the readability of the graphs. One such change was creating palette with three colors (each representing one of the species) using the seaborn library and applying the changes to each of the boxplots. The next change was setting the theme of the seaborn graphs to a standard whitegrid. This allowed for the creation of gridlines and clear borders to visualize the differences between the six boxplots better. Finally, adding labels for the axes and and titles for each of the subplots in addition to the legends representing the species colors improved the readability of the graph overall.\n\n#create the color palette for the graphs using seaborn library color schemes\npalette = sns.color_palette(\"flare\", n_colors=3)\n#set the the theme and font scale of the graphs using the seaborn library\nsns.set_theme(style='whitegrid', font_scale=1.0)\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\",palette=palette, width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\n#set the labels and titles of the graphs\nax[0].set(xlabel=\"\", title=\"Male\", ylabel=\"Species\")\nax[1].set(ylabel=\"Species\", xlabel = \"Body Mass (g)\", title=\"Female\")\n\n#format the layout of the graph and display\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "posts/bruin/index.html#final-notes",
    "href": "posts/bruin/index.html#final-notes",
    "title": "HW 0",
    "section": "",
    "text": "Overall, these are the basic steps to create an interesting data visualization of the Palmer Penguins data set. There are many ways to represent the data of your choice. Using the matplotlib and seaborn libraries, you can choose from a variety of graphs that will allow you to interpret your data. Although I chose to represent one feature considering two variables, there are a multitude of options to choose from. In the future, using these steps will allow one to create diverse and interesting data visualizations!"
  },
  {
    "objectID": "posts/bruin/index.html#final-code",
    "href": "posts/bruin/index.html#final-code",
    "title": "HW 0",
    "section": "",
    "text": "#import the necessary libraries\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n#create a data frame using the data and pandas library\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n#create a copy of the data frame with chosen features\ndf = penguins[[\"Sex\", \"Body Mass (g)\", \"Species\"]].copy()\n\n#modify the data frame to make sure that the sex values are male or female\ndf = df[df[\"Sex\"].isin([\"MALE\", \"FEMALE\"])]\n#modify the data frame to make sure that body mass and species have correct values\ndf.dropna(inplace=True)\n\n# Shorten the species names to avoid redundancy\ndf[\"Species\"] = df[\"Species\"].str.split().str[0]\n\n#create the color palette for the graphs using seaborn library color schemes\npalette = sns.color_palette(\"flare\", n_colors=3)\n#set the the theme and font scale of the graphs using the seaborn library\nsns.set_theme(style='whitegrid', font_scale=1.0)\n\n#create the figure with two vertical subplots that share their x-axis\nfig, ax = plt.subplots(2, 1, figsize=(6, 6), sharex=True)\n\ndef create_boxplot(i, sex):\n    '''\n    Creates two boxplots for each sex on each axis\n    Args:\n        i (int): axes number for the data visualization (0 or 1)\n        sex: which sex to represent in the subplot ('MALE' or 'FEMALE')\n    Returns:\n        None\n    '''\n    #divide the data\n    data = df[df[\"Sex\"] == sex]\n    #create the boxplot for the set data on the correct axis i\n    sns.boxplot(data=data, x=\"Body Mass (g)\", y=\"Species\", hue=\"Species\",palette=palette, width=0.6, dodge = False, ax=ax[i])\n\n#create the boxplots for each sex\ncreate_boxplot(0, \"MALE\")\ncreate_boxplot(1, \"FEMALE\")\n\n#set the labels and titles of the graphs\nax[0].set(xlabel=\"\", title=\"Male\", ylabel=\"Species\")\nax[1].set(ylabel=\"Species\", xlabel = \"Body Mass (g)\", title=\"Female\")\n\n#format the layout of the graph and display\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "HW 0\n\n\n\n\n\n\nweek 3\n\n\nhomework\n\n\n\n\n\n\n\n\n\nJan 23, 2025\n\n\nAnika Savla\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nIntroduction\n\n\n\n\n\n\n\n\n\nJan 21, 2025\n\n\nAnika Savla\n\n\n\n\n\n\nNo matching items"
  }
]